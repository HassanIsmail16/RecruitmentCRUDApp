// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Models;
public partial class RecruitmentContext : DbContext
{
    public RecruitmentContext()
    {
    }

    public RecruitmentContext(DbContextOptions<RecruitmentContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Company> Companies { get; set; }

    public virtual DbSet<Employer> Employers { get; set; }

    public virtual DbSet<JobApplication> JobApplications { get; set; }

    public virtual DbSet<JobSeeker> JobSeekers { get; set; }

    public virtual DbSet<SavedJob> SavedJobs { get; set; }

    public virtual DbSet<User> Users { get; set; }

    public virtual DbSet<Vacancy> Vacancies { get; set; }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see https://go.microsoft.com/fwlink/?LinkId=723263.
        => optionsBuilder.UseSqlServer("Data Source=.;Initial Catalog=Recruitment;Integrated Security=True;Encrypt=False"); // TODO: figure out a solution to the connection string thing

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Company>(entity =>
        {
            entity.HasKey(e => e.CompanyId).HasName("PK__Company__3E2672357C3837A3");

            entity.ToTable("Company");

            entity.HasIndex(e => e.ManagerId, "UQ__Company__5A6073FD504A49F9").IsUnique();

            entity.HasIndex(e => e.Email, "UQ__Company__AB6E6164B5489EA6").IsUnique();

            entity.Property(e => e.CompanyId).HasColumnName("company_id");
            entity.Property(e => e.Description).HasColumnName("description");
            entity.Property(e => e.Email)
                .IsRequired()
                .HasMaxLength(100)
                .HasColumnName("email");
            entity.Property(e => e.Logo).HasColumnName("logo");
            entity.Property(e => e.ManagerId).HasColumnName("manager_id");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(100)
                .HasColumnName("name");
            entity.Property(e => e.Phone)
                .HasMaxLength(20)
                .HasColumnName("phone");

            entity.HasOne(d => d.Manager).WithOne(p => p.Company)
                .HasForeignKey<Company>(d => d.ManagerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Company_Manager");
        });

        modelBuilder.Entity<Employer>(entity =>
        {
            entity.HasKey(e => e.UserId).HasName("PK__Employer__B9BE370FE9F95698");

            entity.ToTable("Employer");

            entity.Property(e => e.UserId)
                .ValueGeneratedNever()
                .HasColumnName("user_id");
            entity.Property(e => e.CompanyId).HasColumnName("company_id");

            entity.HasOne(d => d.CompanyNavigation).WithMany(p => p.Employers)
                .HasForeignKey(d => d.CompanyId)
                .HasConstraintName("FK__Employer__compan__440B1D61");

            entity.HasOne(d => d.User).WithOne(p => p.Employer)
                .HasForeignKey<Employer>(d => d.UserId)
                .HasConstraintName("FK__Employer__user_i__4316F928");
        });

        modelBuilder.Entity<JobApplication>(entity =>
        {
            entity.HasKey(e => e.AppId).HasName("PK__Applicat__6F8A0A341CFDDF45");

            entity.ToTable("JobApplication");

            entity.HasIndex(e => new { e.JobseekerId, e.VacancyId }, "UQ_Application_JobSeeker_Vacancy").IsUnique();

            entity.Property(e => e.AppId).HasColumnName("app_id");
            entity.Property(e => e.AppDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("app_date");
            entity.Property(e => e.EmployerId).HasColumnName("employer_id");
            entity.Property(e => e.JobseekerId).HasColumnName("jobseeker_id");
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(20)
                .HasDefaultValue("Pending")
                .HasColumnName("status");
            entity.Property(e => e.VacancyId).HasColumnName("vacancy_id");

            entity.HasOne(d => d.Employer).WithMany(p => p.JobApplications)
                .HasForeignKey(d => d.EmployerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Applicati__emplo__571DF1D5");

            entity.HasOne(d => d.Jobseeker).WithMany(p => p.JobApplications)
                .HasForeignKey(d => d.JobseekerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Applicati__jobse__5535A963");

            entity.HasOne(d => d.Vacancy).WithMany(p => p.JobApplications)
                .HasForeignKey(d => d.VacancyId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Applicati__vacan__5629CD9C");
        });

        modelBuilder.Entity<JobSeeker>(entity =>
        {
            entity.HasKey(e => e.UserId).HasName("PK__JobSeeke__B9BE370FEFBA2258");

            entity.ToTable("JobSeeker");

            entity.Property(e => e.UserId)
                .ValueGeneratedNever()
                .HasColumnName("user_id");
            entity.Property(e => e.Interests).HasColumnName("interests");
            entity.Property(e => e.PreferredLoc)
                .HasMaxLength(100)
                .HasColumnName("preferred_loc");
            entity.Property(e => e.Resume).HasColumnName("resume");
            entity.Property(e => e.Skills).HasColumnName("skills");

            entity.HasOne(d => d.User).WithOne(p => p.JobSeeker)
                .HasForeignKey<JobSeeker>(d => d.UserId)
                .HasConstraintName("FK__JobSeeker__user___403A8C7D");
        });

        modelBuilder.Entity<SavedJob>(entity =>
        {
            entity.HasKey(e => e.SavedJobId).HasName("PK__SavedJob__CD4CD6BBE945F107");

            entity.ToTable("SavedJob");

            entity.HasIndex(e => new { e.JobseekerId, e.VacancyId }, "UQ_SavedJob_JobSeeker_Vacancy").IsUnique();

            entity.Property(e => e.SavedJobId).HasColumnName("saved_job_id");
            entity.Property(e => e.JobseekerId).HasColumnName("jobseeker_id");
            entity.Property(e => e.SaveDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("save_date");
            entity.Property(e => e.VacancyId).HasColumnName("vacancy_id");

            entity.HasOne(d => d.Jobseeker).WithMany(p => p.SavedJobs)
                .HasForeignKey(d => d.JobseekerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__SavedJob__jobsee__5BE2A6F2");

            entity.HasOne(d => d.Vacancy).WithMany(p => p.SavedJobs)
                .HasForeignKey(d => d.VacancyId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__SavedJob__vacanc__5CD6CB2B");
        });

        modelBuilder.Entity<User>(entity =>
        {
            entity.HasKey(e => e.UserId).HasName("PK__User__B9BE370FBD72C69E");

            entity.ToTable("User");

            entity.HasIndex(e => e.Email, "UQ__User__AB6E6164851935FC").IsUnique();

            entity.Property(e => e.UserId).HasColumnName("user_id");
            entity.Property(e => e.BirthDate)
                .HasColumnType("date")
                .HasColumnName("birth_date");
            entity.Property(e => e.Email)
                .IsRequired()
                .HasMaxLength(100)
                .HasColumnName("email");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(100)
                .HasColumnName("name");
            entity.Property(e => e.Password)
                .IsRequired()
                .HasMaxLength(255)
                .HasColumnName("password");
            entity.Property(e => e.Phone)
                .HasMaxLength(20)
                .HasColumnName("phone");
            entity.Property(e => e.SignupDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("signup_date");
            entity.Property(e => e.UserType)
                .IsRequired()
                .HasMaxLength(20)
                .HasColumnName("user_type");
        });

        modelBuilder.Entity<Vacancy>(entity =>
        {
            entity.HasKey(e => e.VacancyId).HasName("PK__Vacancy__C04F3A66EA4546AF");

            entity.ToTable("Vacancy");

            entity.Property(e => e.VacancyId).HasColumnName("vacancy_id");
            entity.Property(e => e.CompanyId).HasColumnName("company_id");
            entity.Property(e => e.Deadline)
                .HasColumnType("datetime")
                .HasColumnName("deadline");
            entity.Property(e => e.Description).HasColumnName("description");
            entity.Property(e => e.EmployerId).HasColumnName("employer_id");
            entity.Property(e => e.ExperienceLevel)
                .HasMaxLength(20)
                .HasColumnName("experience_level");
            entity.Property(e => e.JobType)
                .HasMaxLength(20)
                .HasColumnName("job_type");
            entity.Property(e => e.PostDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("post_date");
            entity.Property(e => e.Skills).HasColumnName("skills");
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(20)
                .HasDefaultValue("Open")
                .HasColumnName("status");
            entity.Property(e => e.Title)
                .IsRequired()
                .HasMaxLength(100)
                .HasColumnName("title");
            entity.Property(e => e.WorkMode)
                .HasMaxLength(20)
                .HasColumnName("work_mode");

            entity.HasOne(d => d.Company).WithMany(p => p.Vacancies)
                .HasForeignKey(d => d.CompanyId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Vacancy__company__4D94879B");

            entity.HasOne(d => d.Employer).WithMany(p => p.Vacancies)
                .HasForeignKey(d => d.EmployerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Vacancy__employe__4E88ABD4");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}